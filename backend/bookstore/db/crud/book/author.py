from uuid import UUID

from sqlmodel import Session, select

from bookstore.db.crud.utils import get_count
from bookstore.db.models.book.author import Author
from bookstore.db.schemas.book.author import AuthorCreate


def get_authors(session: Session, skip: int = 0, limit: int = 100) -> list[Author]:
    """Get authors."""
    statement = select(Author).offset(skip).limit(limit)
    return session.exec(statement).all()


def get_author(session: Session, author_id: UUID) -> Author | None:
    """Get an author by ID."""
    author = session.get(Author, author_id)
    if not author:
        return None
    return author


def create_author(session: Session, author_in: AuthorCreate) -> Author:
    """Create a new author."""
    author = Author(**author_in.dict())

    session.add(author)
    session.commit()
    session.refresh(author)  # refresh to get autogenerated fields like id

    return author


def update_author(
    session: Session, author_id: str, first_name: str, last_name: str
) -> Author | None:
    """Update an author by ID."""
    author = get_author(session=session, author_id=author_id)
    if not author:
        return None
    author.first_name = first_name
    author.last_name = last_name
    session.add(author)
    session.commit()
    session.refresh(author)
    return author


def delete_author(session: Session, author_id) -> Author:
    """Delete an author by ID."""
    author = get_author(session=session, author_id=author_id)
    if not author:
        return None
    session.delete(author)
    session.commit()
    return author


def get_count_authors(session: Session) -> int:
    """Get total count of author rows in table."""
    return get_count(session=session, model=Author)
